extends CharacterBody3D

# REFERENCES
@onready var raycast = $RayCast3D
@onready var eyes = $Eyes
@onready var shoot_timer = $shoot_timer
@onready var bob_timer = $bob_timer
@onready var height_raycast = $HeightRayCast
@onready var model = $model.get_active_material(0)
var start_pos
@export var health: float = 100.0
var projectile_scene = preload("res://scenes/enemy_and_parts/malware_projectile.tscn")

var target
const TURN_SPEED = 2

# STATE MACHINE
enum {
	IDLE,
	ALERT,
}

var state = IDLE
var up = 1
var height

func _ready():
	start_pos = self.global_position.y
	bob_timer.start()

func _process(delta):
	match state:
		IDLE:
			velocity.x = 0
			velocity.z = 0
		ALERT:
			#bob_timer.stop()
			eyes.look_at(target.global_transform.origin, Vector3.UP)
			rotate_y(deg_to_rad(eyes.rotation.y * TURN_SPEED))
			if raycast.is_colliding():
				var hit = raycast.get_collider()
				if hit.is_in_group("player"):
					#print(raycast.get_collision_normal())
					velocity.x += raycast.get_collision_normal().x * 3 * delta
					velocity.z += raycast.get_collision_normal().z * 3 * delta
			
	
	update_height()
	velocity.y += 1.5 / (height + 1)
	velocity.y -= 0.5
	#velocity.y += up * cos(velocity.y + delta)
	velocity.x = move_toward(velocity.x, 0, delta)
	velocity.z = move_toward(velocity.z, 0, delta)
	raycast.global_position.y = start_pos
	move_and_slide()
	if model.get_shader_parameter("red") >= 0.0:
		model.set_shader_parameter("red", model.get_shader_parameter("red") - delta * 1.2)
	if health <= 0.0:
		self.queue_free()
	

func _on_sight_range_body_entered(body):
	if body.is_in_group("player"):
		state = ALERT
		target = body
		shoot_timer.start()
		print("Saw")

func _on_sight_range_body_exited(body):
	if body.is_in_group("player"):
		state = IDLE
		#bob_timer.start()
		shoot_timer.stop()
		print("Stopped seeing")

func _on_shoot_timer_timeout():
	shoot()
			
func shoot():
	var new_projectile = projectile_scene.instantiate()
	new_projectile._set_dir(-eyes.get_global_transform().basis.z * 20)
	new_projectile.position = eyes.global_position
	$"../".add_child(new_projectile)

func update_height():
	if(height_raycast.is_colliding()):
		var origin = height_raycast.global_transform.origin
		var collision_point = height_raycast.get_collision_point()
		height = origin.distance_to(collision_point)
	else:
		height = 1000000

func _on_bob_timer_timeout():
	up = -up

func take_damage():
	model.set_shader_parameter("red", 1.0);
	health -= 33.4
	print("OW")
