extends CharacterBody3D

# REFERENCES
@onready var raycast = $RayCast3D
@onready var eyes = $Eyes
@onready var shoot_timer = $shoot_timer
@onready var bob_timer = $bob_timer
var projectile_scene = preload("res://scenes/enemy_and_parts/malware_projectile.tscn")

var target
const TURN_SPEED = 2

# STATE MACHINE
enum {
	IDLE,
	ALERT,
	STUNNED
}

var state = IDLE
var up = 1

func _ready():
	bob_timer.start()

func _process(delta):
	
	match state:
		IDLE:
			velocity.y += up * cos(velocity.y + delta)
			move_and_slide()
		ALERT:
			bob_timer.stop()
			eyes.look_at(target.global_transform.origin, Vector3.UP)
			rotate_y(deg_to_rad(eyes.rotation.y * TURN_SPEED))
			if raycast.is_colliding():
				var hit = raycast.get_collider()
				if hit.is_in_group("player"):
					#print(raycast.get_collision_normal())
					velocity.x += raycast.get_collision_normal().x * delta
					velocity.z += raycast.get_collision_normal().z * delta 
				else:
					velocity.x = move_toward(velocity.x, 0, delta)
					velocity.z = move_toward(velocity.z, 0, delta)
			move_and_slide()

func _on_sight_range_body_entered(body):
	if body.is_in_group("player"):
		state = ALERT
		target = body
		shoot_timer.start()

func _on_sight_range_body_exited(_body):
	state = IDLE
	bob_timer.start()
	shoot_timer.stop()

func _on_shoot_timer_timeout():
	shoot()
			
func shoot():
	var new_projectile = projectile_scene.instantiate()
	new_projectile._set_dir(-eyes.get_global_transform().basis.z * 20)
	new_projectile.position = eyes.global_position
	$"../".add_child(new_projectile)


func _on_bob_timer_timeout():
	up = -up
