shader_type spatial;

render_mode blend_add, cull_back, depth_draw_always;

uniform vec4 emission_color: source_color;
uniform vec4 body_color: source_color;
uniform float emission_amount: hint_range(0.0, 16.0) = 5.0;
uniform float rim_sharpness: hint_range(0.0, 16.0) = 3.0;
uniform sampler2D face_tex_idle : source_color;
uniform sampler2D face_tex_mad;
uniform vec3 face_color = vec3(0.);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

void vertex() {
	// Called for every vertex the material is visible on.
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	// Called for every pixel the material is visible on.
	EMISSION = emission_color.rgb * emission_amount;
	ALPHA = pow(1.0 - dot(NORMAL, VIEW), rim_sharpness) * emission_color.a;
	vec3 color = vec3(1., 0., 0.2);
	color.rb = mix(body_color.rb, color.rb, 1.5);
	vec3 albedo = vec3(color.r, 0., color.b);
	vec4 albedo_tex = texture(face_tex_idle,UV);
	color = albedo_tex.r * albedo + albedo_tex.g * face_color + albedo_tex.b * face_color;
	//ALBEDO = albedo.xyz * albedo_tex.xyz;
	ALBEDO = color;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
