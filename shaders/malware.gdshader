shader_type spatial;

render_mode blend_add, cull_back, depth_draw_always;

uniform vec4 emission_color: source_color;
uniform float emission_amount: hint_range(0.0, 16.0) = 5.0;
uniform float rim_sharpness: hint_range(0.0, 16.0) = 3.0;
uniform sampler2D png;

void fragment() {
	// Called for every pixel the material is visible on.
	EMISSION = emission_color.rgg * emission_amount;
	ALPHA = pow(1.0 - dot(NORMAL, VIEW), rim_sharpness) * emission_color.a;
	
	ALBEDO = texture(png, UV).xyz;
	ALBEDO *= vec3(cos(UV.x * TIME/5.), 0., cos(UV.y *TIME/3.));
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
