shader_type spatial;

render_mode diffuse_toon;
uniform vec4 color: source_color;
uniform sampler2D normal_map;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	// Called for every pixel the material is visible on.
	vec4 albedo = color;
	vec4 norm = texture(normal_map, UV);
	albedo.b *= clamp(sin(UV.y * TIME * 0.4) * norm.r * 7.8, 0., 1.);
	albedo.g = 0.;
	albedo.r = clamp((cos(UV.y * TIME * 2.) * 2. + albedo.r) * 200. , 0., 1.);
	ALBEDO = albedo.rgb;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
